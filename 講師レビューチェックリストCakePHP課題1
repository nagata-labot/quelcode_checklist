# 課題１の確認項目

## 確認用の前準備

``` sh
git clone

echo DOCKER_UID=`id -u` > .env
docker-compose build --no-cache
docker-compose up -d

docker-compose exec php bash
cd /var/www/html/mycakeapp
composer install
```

## マイグレーションの実行確認

``` sh
./bin/cake migrations migrate
```
- [ ] エラーが出ない事を確認。

## 基盤環境の確認

### CakePHPの確認①
- http://localhost:10380 に接続する。
- [ ] CakePHPが開く事を確認。
- [ ] エラーが表示されない事を確認。
- [ ] 表示の崩れがない事を確認。
### CakePHPの確認②
- http://localhost:10380/auction に接続する。
- [ ] ログイン画面にリダイレクトされる事を確認。
- [ ] エラーが表示されない事を確認。
- [ ] 表示の崩れがない事を確認。

## 動作環境の確認

### 管理者アカウント作成の確認
- http://localhost:10380/users/add に接続する。
- [ ] エラーが表示されない事を確認。
- [ ] admin1 / admin1 / admin を入力し、「SUBMIT」ボタンを押下する。
- [ ] ユーザー登録ができる事を確認。
- [ ] エラーが表示されない事を確認。

### 一般アカウント作成の確認
- [ ] 左側メニューの「New User」を押下する。
- [ ] エラーが表示されない事を確認。
- [ ] user1 / user1 / user を入力し、「SUBMIT」ボタンを押下する。
- [ ] ユーザー登録ができる事を確認。
- [ ] エラーが表示されない事を確認。

## テストデータ作成
- http://localhost:10380/users/logout に接続する。

### 商品情報画面のレイアウト
- http://localhost:10380/auction に接続する。
- [ ] admin1 / admin1 を入力し、ログインボタンを押下する。
- [ ] エラーが表示されない事を確認。
- [ ] 右メニューの「商品を出品する」を押下する。
- [ ] エラーが表示されない事を確認。
- [ ] 「商品詳細」テキストエリアがtextareaで配置されている事を確認。
- [ ] 「画像ファイル選択」ボタンが配置されている事を確認。

### 商品情報画面の動作

#### 正常系

- [ ] 右メニューの「商品を出品する」を押下する。
- [ ] 商品１ / 商品１普通 / ？ / 2ヶ月後 / 31 / 0 / 0 / 画像ファイル有 を入力し、「Submit」ボタンを押下する。
- [ ] エラーが表示されない事を確認。
- [ ] 画像がリネームされる事を確認。

#### 必須チェック

- [ ] 右メニューの「商品を出品する」を押下する。
- [ ] 正常系データと同一のデータを入力し、「商品詳細」テキストエリアだけを空白にして、「Submit」ボタンを押下する。
- [ ] データが登録されないことを確認。再入力を促す、もしくは、エラー等の設計どおりに動作することを確認。
- [ ] 正常系データと同一のデータを入力し、「画像選択」ボタンだけを空白にして、「Submit」ボタンを押下する。
- [ ] データが登録されないことを確認。再入力を促す、もしくは、エラー等の設計どおりに動作することを確認。

#### 落札者なし時間切れ

- [ ] 右メニューの「商品を出品する」を押下する。
- [ ] 商品２ / 商品２時間切れ / ？ / ？ / ？ / ? / ？5分後 / 画像ファイル有 を入力し、「Submit」ボタンを押下する。
- [ ] エラーが表示されない事を確認。

#### 危険文字エスケープ

- [ ] 右メニューの「商品を出品する」を押下する。
- [ ] 商品３ / 商品３危険文字<script></script> / ？ / 2ヶ月後 / 31 / 0 / 0 / 画像ファイル有 を入力し、「Submit」ボタンを押下する。
- [ ] エラーが表示されない事を確認。

#### 画像ファイル以外

- [ ] 右メニューの「商品を出品する」を押下する。
- [ ] 商品４ / 商品４画像ファイル以外 / ？ / 2ヶ月後 / 31 / 0 / 0 / 画像ファイル以外 を入力し、「Submit」ボタンを押下する。
- [ ] データが登録されないことを確認。再入力を促す、もしくは、エラー等の設計どおりに動作することを確認。

#### 文字溢れ

- [ ] 右メニューの「商品を出品する」を押下する。
- [ ] 商品５ / 商品５文字溢れ / ？ / 2ヶ月後 / 31 / 0 / 0 / 画像ファイル有 を入力し、商品詳細の文字数以上を入れて「Submit」ボタンを押下する。
- [ ] データが登録されないことを確認。再入力を促す、もしくは、エラー等の設計どおりに動作することを確認。

### 商品情報画面の確認

- 右メニューの「商品リストを見る」を押下する。

#### 普通

- [ ] 表示の崩れがない事を確認。
- [ ] 出品画像が表示されている事を確認。
- [ ] 商品詳細が表示されている事を確認。

#### 時間切れ

- [ ] 表示の崩れがない事を確認。
- [ ] 出品画像が表示されている事を確認。
- [ ] 商品詳細が表示されている事を確認。
- [ ] Noticeが出るが書籍の考慮漏れ。（落札者なしで時間切れの場合には落札者情報が存在しないため。）

#### 危険文字エスケープ

- [ ] 表示の崩れがない事を確認。
- [ ] 出品画像が表示されている事を確認。
- [ ] 商品詳細が表示されている事を確認。
- [ ] 危険文字がそのまま文字として表示されている事を確認。

### その他留意事項

- [ ] gitに画像ファイル等のデータファイル系が混ざりこんでいない。
- 主題が「詳細情報」と「画像」であるため、入札・落札等の確認はモンキーテストで行う。
- 主題が「詳細情報」と「画像」であるため、セキュリティの確認などは課題２で行う。（その部分のデグレはモンキーテストで気づいた時のみ。）
- 自分で出品して、自分で落札出来るが気にしない。

## コードの確認

### config/Migrationの確認

- 先のマイグレーション実行でエラーが出た場合は確認しておく。

### src/Modelの確認

- [ ] 設計書通りにEntityの記載がされている事を確認。
- [ ] 設計書通りにTableの記載がされている事を確認。
- [ ] 設計書通りにTableのValidatorの記載されている事を確認。

### src/Controllerの確認

- [ ] 振り分け処理だけが記載されている事を確認。

### src/Templateの確認

- [ ] 振り分け処理だけが記載されている事を確認。

## メモ

- User : ユーザー情報
- Biditem : 商品情報
- Bidrequest : 入札情報
- Bidinfo : 落札情報
- Bidmessage : 両者のやり取りメッセージ
- User id 1 : admin1（管理者ユーザー1）
- User id 2 : user1（一般ユーザー1）
- User id 3 : admin2（予備）
- User id 4 : user2（予備）
